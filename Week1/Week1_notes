
#Library
import networkx as nx

#Undirected Graph
G=nx.Graph()
G.add_edge('A','B')
G.add_edge('B','C')

#Directed Graph
G=nx.DiGraph()
G.add_edge('B','A')
G.add_edge('B','C')

#Adding weights to the network
G=nx.Graph()
G.add_edge('A','B',weight=6)

#Adding sign to the networkx
G=nx.Graph()
G.add_edge('A','B',sign='+')
G.add_edge('B','C',sign='-')

#Other edge attribute
G=nx.Graph()
G.add_edge('A','B',relation='friend')
G.add_edge('B','C',relation='coworker')
G.add_edge('D','E',relation='family')
G.add_edge('E','I',relation='neighbor')

#MultiGraphs
G=nx.MultiGraph()
G.add_edge('A','B',relation='friend')
G.add_edge('A','B',relation='neighbor')
G.add_edge('G','F',relation='family')
G.add_edge('G','F',relation='coworker')


# Node and Edge attributes
G=nx.Graph()
G.add_edge('A','B',weight=6,relation='family')
G.add_edge('B','C',weight=13,relation='friend')

#get edge attributes
G.edges()
G.edges(data=True)
G.edges(data='relation')

#get an edge
G.edge['A']['B']
G.edge['A']['B']['weight']

#Directed Graph
G=nx.DiGraph()
G.add_edge('A','B',weight=6,relation='family')
G.add_edge('C','B',weight=13,relation='friend')
G.edge['C']['B']['weight']

#Multi Graph
G=nx.MultiGraph()
G.add_edge('A','B',weight=6,relation='family')
G.add_edge('A','B',weight=18,relation='friend')
G.add_edge('C','B',weight=13,relation='friend')

G.edge['A']['B'][0]['weight']
G.edge['A']['B'][1]['weight']


#Directed Multi D DiGraph
G=nx.MultiDiGraph()
G.add_edge('A','B',weight=6,relation='family')
G.add_edge('A','B',weight=18,relation='friend')
G.add_edge('C','B',weight=13,relation='friend')


#Nodes attributes
#Adding node attribute
G.add_node('A',role='trader')
G.add_node('B',role='trader')
G.add_node('C',role='manager')

G.nodes()
G.nodes(data=True)
G.node['A']['role']


#Bipartite Graph
from networkx.algorithms import bipartite
B=nx.Graph()
B.add_nodes_from(['A','B','C','D','E'],bipartite=0)
B.add_nodes_from([1,2,3,4],bipartite=1)
B.add_edges_from([('A',1),('B',1),('C',1),('C',3),('D',2),('E',3),('E',4)])

#Check if graph is bipartite
bipartite.is_bipartite(B)

#Check if set of nodes are biparition of Graph
X=set([1,2,3,4])
bipartite.is_bipartite_node_set(B,X)

bipartite.sets(B)

#Projected graph
B=nx.Graph()
B.add_edges_from([('A',1),('B',1),('C',1),('D',1),
                  ('H',1),('B',2),('C',2),('D',2),('E',2),
                  ('G',2),('E',3),('F',3),('H',3),('J',3),
                  ('E',4),('I',4),('J',4)])

X=set(['A','B','C','D','E','F','G','H','I','J'])
bipartite.is_bipartite_node_set(B,X)
P=bipartite.projected_graph(B,X)

X=set([1,2,3,4])
P=bipartite.projected_graph(B,X)

#Adding weights to projected_graph
X=set([1,2,3,4])
P=bipartite.weighted_projected_graph(B,X)


#Loading Network in Graphs
import networkx as nx
import numpy as np
import pandas as pd
%matplotlib notebook

# Instantiate the graph
G1 = nx.Graph()
# add node/edge pairs
G1.add_edges_from([(0, 1),
                   (0, 2),
                   (0, 3),
                   (0, 5),
                   (1, 3),
                   (1, 6),
                   (3, 4),
                   (4, 5),
                   (4, 7),
                   (5, 8),
                   (8, 9)])

# draw the network G1
nx.draw_networkx(G1)

#adjacency list
!cat G_adjlist.txt

G2 = nx.read_adjlist('G_adjlist.txt', nodetype=int)
G2.edges()

#adjancency matrix
G_mat = np.array([[0, 1, 1, 1, 0, 1, 0, 0, 0, 0],
                  [1, 0, 0, 1, 0, 0, 1, 0, 0, 0],
                  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                  [1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
                  [0, 0, 0, 1, 0, 1, 0, 1, 0, 0],
                  [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0, 1, 0, 0, 0, 1],
                  [0, 0, 0, 0, 0, 0, 0, 0, 1, 0]])
G_mat

G3 = nx.Graph(G_mat)
G3.edges()

#edgelist
!cat G_edgelist.txt

G4 = nx.read_edgelist('G_edgelist.txt', data=[('Weight', int)])
G4.edges(data=True)

G_df = pd.read_csv('G_edgelist.txt', delim_whitespace=True,
                   header=None, names=['n1', 'n2', 'weight'])
G_df

G5 = nx.from_pandas_dataframe(G_df, 'n1', 'n2', edge_attr='weight')
G5.edges(data=True)

#reading edgelist and creating MultiDiGraph
chess = nx.read_edgelist('chess_graph.txt', data=[('outcome', int), ('timestamp', float)],
                         create_using=nx.MultiDiGraph())

chess.is_directed(), chess.is_multigraph()
chess.edges(data=True)

games_played = chess.degree()
games_played

max_value = max(games_played.values())
max_key, = [i for i in games_played.keys() if games_played[i] == max_value]
print('player {}\n{} games'.format(max_key, max_value))

df = pd.DataFrame(chess.edges(data=True), columns=['white', 'black', 'outcome'])
df.head()

df['outcome'] = df['outcome'].map(lambda x: x['outcome'])
df.head()

won_as_white = df[df['outcome']==1].groupby('white').sum()
won_as_black = -df[df['outcome']==-1].groupby('black').sum()
win_count = won_as_white.add(won_as_black, fill_value=0)
win_count.head()

win_count.nlargest(5, 'outcome')
