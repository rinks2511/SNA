
#Degree distribution of the network
degrees=G.degree()
degree_values=sorted(set(degree.values()))
histogram=[list(degrees.values()).counts(i)/float(nx.number_of_nodes(G)) for i in degree_values]

import matplotlib.pyplot as plt
plt.bar(degree_values,histogram)
plt.xlabel('Degree')
plt.ylabel('Fraction of nodes')
plt.show()

#In-degreee distribution
in_degrees=G.in_degree()
in_degree_values=sorted(set(in_degree.values()))
histogram=[list(in_degrees.values()).counts(i)/float(nx.number_of_nodes(G)) for i in in_degree_values]

import matplotlib.pyplot as plt
plt.bar(in_degree_values,histogram)
plt.xlabel('In Degree')
plt.ylabel('Fraction of nodes')
plt.show()

#Preferential Attachment
#barabasi_albert_graph(n,m)

G=nx.barabasi_albert_graph(1000000,1)
degrees=G.degree()
degree_values=sorted(set(degrees.values()))
histogram=[list(degrees.values().count(i))/float(nx.number_of_nodes(G)) for i in degree_values]

plt.plot(degree_values,histogram,'o')
plt.xlabel('Degree')
plt.ylabel('Fraction of Nodes')
plt.xscale('log')
plt.yscale('log')
plt.show()

#Path Length and clustering
G=nx.barabasi_albert_graph(1000,4)

print(nx.average_clustering(G))

print(nx.average_shortest_path_length(G))


#Small world model in networkx

G=nx.watts_strogatz_graph(1000,6,0.04)
degrees=G.degree()
degree_values=sorted(set(degrees.values()))
histogram=[list(degrees.values().count(i))/float(nx.number_of_nodes(G)) for i in degree_values]

plt.plot(degree_values,histogram,'o')
plt.xlabel('Degree')
plt.ylabel('Fraction of Nodes')
plt.xscale('log')
plt.yscale('log')
plt.show()

#connected_watts_strogatz_graph(n,k,p,t) up to t times

#newman_watts_strogatz_graph(n,k,p) - new egdes are added with prob p


#Link Prediction
#1. Common Neighbours

common_neigh=[(e[0],e[1],len(list(nx.common_neighbors(G,e[0],e[1])))) for e in nx.non_edges(G)]
sorted(common_neigh,key=operator.itemgetter(2),reverse=True)
print(common_neigh)

#2. Jaccard Coefficient
L=list(nx.jaccard_coefficient(G))
L.sort(key=operator.itemgetter(2),reverse=True)
print(L)

#3. Resource Allocation Index
L=list(nx.resource_allocation_index(G))
L.sort(key=operator.itemgetter(2),reverse=True)
print(L)

#4. Adamic adar index
L=list(nx.adamic_adar_index(G))
L.sort(key=operator.itemgetter(2),reverse=True)
print(L)

#5. Preferential attachment score
L=list(nx.preferential_attachment(G))
L.sort(key=operator.itemgetter(2),reverse=True)
print(L)

#6. Community common Neighbors
L=list(nx.cn_soundarajan_hopcroft(G))
L.sort(key=operator.itemgetter(2),reverse=True)
print(L)

#7. Community Resource allocation
L=list(nx.ra_index_soundarajan_hopcroft(G))
L.sort(key=operator.itemgetter(2),reverse=True)
print(L)
