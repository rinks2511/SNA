#Node Importance
#1. High degree
#2. Average proximity to other nodes
#3. Fraction of shortest path that pass through the node

G=nx.karate_club_graph()
G=nx.convert_node_labels_to_integers(G,first_label=1)

#Node Centrality
#1. Degree Centrality - imp nodes have many connections
degCent=nx.degree_centrality(G)
degCent[34]

#Directed Graph
indegCent=nx.in_degree_centrality(G)
indegCent['A']

outdegCent=nx.out_degree_centrality(G)
outdegCent['A']

#2. Closeness Centrality - imp nodes are close to other nodes
closeCent=nx.closeness_centrality(G)
closeCent[32]

sum(nx.shortest_path_length(G,32).values())
len(G.nodes())-1

#Directed Graph
closeCent=nx.closeness_centrality(G,normalized=False)
closeCent=nx.closeness_centrality(G,normalized=True)

#3. Betweenness Centrality
#Important nodes connect other nodes
btwnCent=nx.betweenness_centrality(G,normalized=True,endpoints=False)

import operator
sorted(btwnCent.items(),key=operator.itemgetter(1),reverse=True)[0:5]

btwnCent_approx=nx.betweenness_centrality(G,normalized=True,endpoints=False,k=10)
sorted(btwnCent_approx.items(),key=operator.itemgetter(1),reverse=True)[0:5]

btwnCent_subset=nx.betweenness_centrality_subset(G,[34,33,21,30,32],[1,4,13,11,6,12],normalized=True)
sorted(btwnCent_subset.items(),key=operator.itemgetter(1),reverse=True)[0:5]

#Betweenness edge centralityThe

btwnCent_edge=nx.edge_betweenness_centrality(G,normalized=True)
sorted(btwnCent_edge.items(),key=operator.itemgetter(1),reverse=True)[0:5]


#4. Load Centrality
#5. Page Rank
#6. Katz Centrality
#7. Percolation Centrality
